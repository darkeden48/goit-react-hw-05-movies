{"version":3,"file":"static/js/reviews.b1463ba4.chunk.js","mappings":"0NAIe,SAASA,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACRC,MAAM,sCAAD,OACmCN,EADnC,4EAGFO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,WAClBJ,KAAKH,KACP,CAACJ,KAGF,0BACE,wBACsB,IAAnBG,EAAQS,OACPT,EAAQU,KAAI,SAAAC,GAAE,OACZ,2BACE,qCAAaA,EAAGC,UACfD,EAAGE,QAFN,MAASF,EAAGG,QAMZ","sources":["components/CastReviews/Reviews.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { PropTypes } from 'prop-types';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=070151ea430b4e74dbca9bca592b262c&language=en-US&page=1`,\n    )\n      .then(response => response.json())\n      .then(data => data.results)\n      .then(setReviews);\n  }, [movieId]);\n\n  return (\n    <div>\n      <ul>\n        {reviews.length !== 0 ? (\n          reviews.map(el => (\n            <li key={el.id}>\n              <h3>Author: {el.author}</h3>\n              {el.content})\n            </li>\n            ))\n            ) : (\n            <p>We haven't had any reviews yet</p>\n          )}\n      </ul>\n    </div>\n  );\n}\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    }),\n  ),\n};\n"],"names":["Reviews","movieId","useParams","useState","reviews","setReviews","useEffect","fetch","then","response","json","data","results","length","map","el","author","content","id"],"sourceRoot":""}